// /////////////////////////////////////////////////////////////////////////
// SystemC code automatically generated by hif2sc
// Part of HIFSuite - Version stable
// Site: www.hifsuite.com - Contact: hifsuite@edalab.it
//
// HIFSuite copyright: EDALab s.r.l. - Networked Embedded Systems
// Site: www.edalab.it - Contact: info@edalab.it
// /////////////////////////////////////////////////////////////////////////


#ifndef WATCHDOG__HH
#define WATCHDOG__HH

#include <hif_vhdl_ieee_std_logic_unsigned.hh>
#include <hif_vhdl_ieee_std_logic_signed.hh>
#include <hif_systemc_extensions.hh>
#include <systemc>

class watchdog :
    public sc_core::sc_module
{

public:

    sc_core::sc_in< sc_dt::sc_logic > clk;
    sc_core::sc_in< sc_dt::sc_logic > reset;
    sc_core::sc_in< sc_dt::sc_logic > en;
    sc_core::sc_out< sc_dt::sc_logic > expired;

private:
    const sc_dt::sc_lv< 32L > DEADLINE;
    const sc_dt::sc_lv< 32L > CLK_PERIOD;

public:
    sc_core::sc_signal< sc_dt::sc_lv< 32L > > counter;

    void start_of_simulation();


    const sc_core::sc_time hif_verilog_timescale_unit;
    const sc_core::sc_time hif_verilog_timescale_precision;


    SC_HAS_PROCESS( watchdog );

    watchdog( sc_core::sc_module_name name_, const sc_dt::sc_lv< 32L > DEADLINE_
         = sc_dt::sc_lv< 32L >("00000000000000000000101110111000"), const sc_dt::sc_lv<
         32L > CLK_PERIOD_ = sc_dt::sc_lv< 32L >("00000000000000000000000000010100"
        ) );
    ~watchdog();


private:

    watchdog( const watchdog & );
    const watchdog& operator= ( const watchdog & );


    void process();
    void st();


};


#endif

